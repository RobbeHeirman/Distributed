/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.distributed.proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LightInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LightInfo\",\"namespace\":\"avro.distributed.proto\",\"fields\":[{\"name\":\"client_info\",\"type\":{\"type\":\"record\",\"name\":\"ClientInfo\",\"fields\":[{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ClientType\",\"symbols\":[\"USER\",\"FRIDGE\",\"LIGHT\",\"SENSOR\"]}},{\"name\":\"key\",\"type\":\"int\"},{\"name\":\"online\",\"type\":\"boolean\"}]}},{\"name\":\"state\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public avro.distributed.proto.ClientInfo client_info;
  @Deprecated public boolean state;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public LightInfo() {}

  /**
   * All-args constructor.
   */
  public LightInfo(avro.distributed.proto.ClientInfo client_info, java.lang.Boolean state) {
    this.client_info = client_info;
    this.state = state;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return client_info;
    case 1: return state;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: client_info = (avro.distributed.proto.ClientInfo)value$; break;
    case 1: state = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'client_info' field.
   */
  public avro.distributed.proto.ClientInfo getClientInfo() {
    return client_info;
  }

  /**
   * Sets the value of the 'client_info' field.
   * @param value the value to set.
   */
  public void setClientInfo(avro.distributed.proto.ClientInfo value) {
    this.client_info = value;
  }

  /**
   * Gets the value of the 'state' field.
   */
  public java.lang.Boolean getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.Boolean value) {
    this.state = value;
  }

  /** Creates a new LightInfo RecordBuilder */
  public static avro.distributed.proto.LightInfo.Builder newBuilder() {
    return new avro.distributed.proto.LightInfo.Builder();
  }
  
  /** Creates a new LightInfo RecordBuilder by copying an existing Builder */
  public static avro.distributed.proto.LightInfo.Builder newBuilder(avro.distributed.proto.LightInfo.Builder other) {
    return new avro.distributed.proto.LightInfo.Builder(other);
  }
  
  /** Creates a new LightInfo RecordBuilder by copying an existing LightInfo instance */
  public static avro.distributed.proto.LightInfo.Builder newBuilder(avro.distributed.proto.LightInfo other) {
    return new avro.distributed.proto.LightInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for LightInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LightInfo>
    implements org.apache.avro.data.RecordBuilder<LightInfo> {

    private avro.distributed.proto.ClientInfo client_info;
    private boolean state;

    /** Creates a new Builder */
    private Builder() {
      super(avro.distributed.proto.LightInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.distributed.proto.LightInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.client_info)) {
        this.client_info = data().deepCopy(fields()[0].schema(), other.client_info);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing LightInfo instance */
    private Builder(avro.distributed.proto.LightInfo other) {
            super(avro.distributed.proto.LightInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.client_info)) {
        this.client_info = data().deepCopy(fields()[0].schema(), other.client_info);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'client_info' field */
    public avro.distributed.proto.ClientInfo getClientInfo() {
      return client_info;
    }
    
    /** Sets the value of the 'client_info' field */
    public avro.distributed.proto.LightInfo.Builder setClientInfo(avro.distributed.proto.ClientInfo value) {
      validate(fields()[0], value);
      this.client_info = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'client_info' field has been set */
    public boolean hasClientInfo() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'client_info' field */
    public avro.distributed.proto.LightInfo.Builder clearClientInfo() {
      client_info = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'state' field */
    public java.lang.Boolean getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public avro.distributed.proto.LightInfo.Builder setState(boolean value) {
      validate(fields()[1], value);
      this.state = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'state' field */
    public avro.distributed.proto.LightInfo.Builder clearState() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public LightInfo build() {
      try {
        LightInfo record = new LightInfo();
        record.client_info = fieldSetFlags()[0] ? this.client_info : (avro.distributed.proto.ClientInfo) defaultValue(fields()[0]);
        record.state = fieldSetFlags()[1] ? this.state : (java.lang.Boolean) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
